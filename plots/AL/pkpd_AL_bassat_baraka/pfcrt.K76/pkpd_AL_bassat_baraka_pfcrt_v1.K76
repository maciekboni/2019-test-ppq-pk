{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# [Bassat et al., 2009](https://pubmed.ncbi.nlm.nih.gov/19936217/) and [Baraka et al., 2014](https://journals.asm.org/doi/10.1128/aac.03647-14)\n",
    "\n",
    "### **Drug:** AL\n",
    "### **Genotype:** pfcrt K76 (WT)\n",
    "### **Number of patients in arm:** 27\n",
    "### **Number of patients cured:** 25\n",
    "### **Efficacy:** 0.9259 or 92.59%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### *Loading required libraries*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import subprocess\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt \n",
    "import seaborn as sns\n",
    "from timeit import default_timer as timer\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulating 10k patients with default values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "command_default = [\"/home/venitha_b/Projects/2019-test-ppq-pk/build/run_ppq_pk\", \"--AL\", \"-n\", \"1000\"]\n",
    "output_default = subprocess.run(command_default, capture_output=True, text=True)\n",
    "lines_default = output_default.stdout.splitlines()\n",
    "df_default = pd.DataFrame([line.split(',') for line in lines_default], columns=[\"PID\",\"HOUR\",\"COMP2CONC_ART\",\"COMP2CONC_LUM\",\"PARASITEDENSITY\"])\n",
    "df_default = df_default.iloc[1:]\n",
    "df_default = df_default.apply(pd.to_numeric, errors='coerce')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Saving the main dataframe to a pickle file\n",
    "#pickle.dump(df_default, open('pkpd_AL_bassat_baraka_pfcrt.K76_default.pyobj', 'wb')) \n",
    "#df_default.to_csv('pkpd_AL_bassat_baraka_pfcrt.K76_default.csv', index=False, quoting= False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Loading the main dataframe from a pickle file\n",
    "df_default = pickle.load(open('pkpd_AL_bassat_baraka_pfcrt.K76_default.pyobj', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PID</th>\n",
       "      <th>HOUR</th>\n",
       "      <th>COMP2CONC_ART</th>\n",
       "      <th>COMP2CONC_LUM</th>\n",
       "      <th>PARASITEDENSITY</th>\n",
       "      <th>LOG_PARASITEDENSITY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>20000.000</td>\n",
       "      <td>4.301030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>30.012</td>\n",
       "      <td>1014.819</td>\n",
       "      <td>8522.690</td>\n",
       "      <td>3.930577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>17.599</td>\n",
       "      <td>1875.401</td>\n",
       "      <td>4426.372</td>\n",
       "      <td>3.646048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.223</td>\n",
       "      <td>2600.930</td>\n",
       "      <td>2541.210</td>\n",
       "      <td>3.405041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.938</td>\n",
       "      <td>3208.326</td>\n",
       "      <td>1531.515</td>\n",
       "      <td>3.185121</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PID  HOUR  COMP2CONC_ART  COMP2CONC_LUM  PARASITEDENSITY  \\\n",
       "1    0   0.0          0.000          0.000        20000.000   \n",
       "2    0   1.0         30.012       1014.819         8522.690   \n",
       "3    0   2.0         17.599       1875.401         4426.372   \n",
       "4    0   3.0         10.223       2600.930         2541.210   \n",
       "5    0   4.0          5.938       3208.326         1531.515   \n",
       "\n",
       "   LOG_PARASITEDENSITY  \n",
       "1             4.301030  \n",
       "2             3.930577  \n",
       "3             3.646048  \n",
       "4             3.405041  \n",
       "5             3.185121  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Creating new column with log(parasite density), adding 0.00001 to avoid log(0) error\n",
    "df_default['LOG_PARASITEDENSITY'] = np.log10(df_default['PARASITEDENSITY'] + 0.00001)\n",
    "\n",
    "df_default.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting number of patients with treatment failure\n",
    "df_default_day28_failed = df_default[(df_default['PARASITEDENSITY'] >= 10) & (df_default['HOUR'] == 671.0)]\n",
    "df_default_day28_failed_pids = df_default_day28_failed['PID'].unique().tolist()\n",
    "df_default_day28_failed_pids = np.array(df_default_day28_failed_pids)\n",
    "print(df_default_day28_failed['PID'].unique().tolist())\n",
    "len(df_default_day28_failed['PID'].unique().tolist())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simulating 95% efficacy in 1000 patients by only adjusting pmax_art\n",
    "\n",
    "### Default pmax_art: 0.99997\n",
    "\n",
    "### 1% decrease: 0.99997 - (0.99997 * 0.01) = 0.9899703\n",
    "### **2.5% decrease: 0.99997 - (0.99997 * 0.025) = 0.97497075 gives ~95% efficacy**\n",
    "### 5% decrease: 0.99997 - (0.99997 * 0.05) = 0.9499715\n",
    "### 10% decrease: 0.99997 - (0.99997 * 0.1) = 0.899973\n",
    "### 25% decrease: 0.99997 - (0.99997 * 0.25) = 0.7499775\n",
    "### 50% decrease: 0.99997 - (0.99997 * 0.5) = 0.499985\n",
    "### 75% decrease: 0.99997 - (0.99997 * 0.75) = 0.24999250000000006\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "command_pmax_art_adj = [\"/home/venitha_b/Projects/2019-test-ppq-pk/build/run_ppq_pk\", \"--AL\", \"-n\", \"1000\", \"--pmax_art\", \"0.97497075\"]\n",
    "output_pmax_art_adj = subprocess.run(command_pmax_art_adj, capture_output=True, text=True)\n",
    "lines_pmax_art_adj = output_pmax_art_adj.stdout.splitlines()\n",
    "df_pmax_art_adj = pd.DataFrame([line.split(',') for line in lines_pmax_art_adj], columns=[\"PID\",\"HOUR\",\"COMP2CONC_ART\",\"COMP2CONC_LUM\",\"PARASITEDENSITY\"])\n",
    "df_pmax_art_adj = df_pmax_art_adj.iloc[1:]\n",
    "df_pmax_art_adj = df_pmax_art_adj.apply(pd.to_numeric, errors='coerce')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Saving the main dataframe to a pickle file\n",
    "pickle.dump(df_pmax_art_adj, open('pkpd_AL_bassat_baraka_pfcrt.K76_pmax_art_adj.pyobj', 'wb')) \n",
    "df_pmax_art_adj.to_csv('pkpd_AL_bassat_baraka_pfcrt.K76_pmax_art_adj.csv', index=False, quoting= False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Loading the main dataframe from a pickle file\n",
    "df_pmax_art_adj = pickle.load(open('pkpd_AL_bassat_baraka_pfcrt.K76_pmax_art_adj.pyobj', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PID</th>\n",
       "      <th>HOUR</th>\n",
       "      <th>COMP2CONC_ART</th>\n",
       "      <th>COMP2CONC_LUM</th>\n",
       "      <th>PARASITEDENSITY</th>\n",
       "      <th>LOG_PARASITEDENSITY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>20000.000</td>\n",
       "      <td>4.301030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.626</td>\n",
       "      <td>1242.087</td>\n",
       "      <td>10516.002</td>\n",
       "      <td>4.021851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>18.868</td>\n",
       "      <td>2263.636</td>\n",
       "      <td>6558.456</td>\n",
       "      <td>3.816802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>19.679</td>\n",
       "      <td>3097.426</td>\n",
       "      <td>4558.063</td>\n",
       "      <td>3.658780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>12.590</td>\n",
       "      <td>3771.555</td>\n",
       "      <td>3360.425</td>\n",
       "      <td>3.526394</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PID  HOUR  COMP2CONC_ART  COMP2CONC_LUM  PARASITEDENSITY  \\\n",
       "1    0   0.0          0.000          0.000        20000.000   \n",
       "2    0   1.0          2.626       1242.087        10516.002   \n",
       "3    0   2.0         18.868       2263.636         6558.456   \n",
       "4    0   3.0         19.679       3097.426         4558.063   \n",
       "5    0   4.0         12.590       3771.555         3360.425   \n",
       "\n",
       "   LOG_PARASITEDENSITY  \n",
       "1             4.301030  \n",
       "2             4.021851  \n",
       "3             3.816802  \n",
       "4             3.658780  \n",
       "5             3.526394  "
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Creating new column with log(parasite density), adding 0.00001 to avoid log(0) error\n",
    "df_pmax_art_adj['LOG_PARASITEDENSITY'] = np.log10(df_pmax_art_adj['PARASITEDENSITY'] + 0.00001)\n",
    "\n",
    "df_pmax_art_adj.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12, 62, 69, 98, 112, 169, 183, 194, 200, 247, 256, 267, 318, 432, 464, 481, 482, 486, 544, 556, 560, 561, 578, 595, 622, 630, 638, 643, 663, 684, 689, 694, 701, 712, 736, 828, 840, 857, 903, 927, 942, 945, 971, 996]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "44"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting number of patients with treatment failure\n",
    "df_pmax_art_adj_day28_failed = df_pmax_art_adj[(df_pmax_art_adj['PARASITEDENSITY'] >= 10) & (df_pmax_art_adj['HOUR'] == 671.0)]\n",
    "df_pmax_art_adj_day28_failed_pids = df_pmax_art_adj_day28_failed['PID'].unique().tolist()\n",
    "df_pmax_art_adj_day28_failed_pids = np.array(df_pmax_art_adj_day28_failed_pids)\n",
    "print(df_pmax_art_adj_day28_failed['PID'].unique().tolist())\n",
    "len(df_pmax_art_adj_day28_failed['PID'].unique().tolist())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simulating 92.59% efficacy in 1000 patients by adjusting both ec50_art and pmax_art\n",
    "\n",
    "### Default pmax_art: 0.99997\n",
    "### 2.5% decrease: 0.99997 - (0.99997 * 0.025) = 0.97497075\n",
    "\n",
    "### Default ec50_art: 0.1\n",
    "### **10% increase: 0.1 + (0.1 * 0.1) = 0.11000000000000001 gives exactly 95% efficacy**\n",
    "### **20% increase: 0.1 + (0.1 * 0.2) = 0.12000000000000001 gives ~95% efficacy**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.12000000000000001"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0.1 + (0.1 * 0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "command_ec50_pmax_art_adj = [\"/home/venitha_b/Projects/2019-test-ppq-pk/build/run_ppq_pk\", \"--AL\", \"-n\", \"1000\", \"--pmax_art\", \"0.97497075\", \"--ec50_art\", \"0.12000000000000001\"]\n",
    "output_ec50_pmax_art_adj = subprocess.run(command_ec50_pmax_art_adj, capture_output=True, text=True)\n",
    "lines_ec50_pmax_art_adj = output_ec50_pmax_art_adj.stdout.splitlines()\n",
    "df_ec50_pmax_art_adj = pd.DataFrame([line.split(',') for line in lines_ec50_pmax_art_adj], columns=[\"PID\",\"HOUR\",\"COMP2CONC_ART\",\"COMP2CONC_LUM\",\"PARASITEDENSITY\"])\n",
    "df_ec50_pmax_art_adj = df_ec50_pmax_art_adj.iloc[1:]\n",
    "df_ec50_pmax_art_adj = df_ec50_pmax_art_adj.apply(pd.to_numeric, errors='coerce')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Saving the main dataframe to a pickle file\n",
    "pickle.dump(df_ec50_pmax_art_adj, open('pkpd_AL_bassat_baraka_pfcrt.K76_ec50_pmax_art_adj.pyobj', 'wb')) \n",
    "df_ec50_pmax_art_adj.to_csv('pkpd_AL_bassat_baraka_pfcrt.K76_ec50_pmax_art_adj.csv', index=False, quoting= False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Loading the main dataframe from a pickle file\n",
    "df_ec50_pmax_art_adj = pickle.load(open('pkpd_AL_bassat_baraka_pfcrt.K76_ec50_pmax_art_adj.pyobj', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PID</th>\n",
       "      <th>HOUR</th>\n",
       "      <th>COMP2CONC_ART</th>\n",
       "      <th>COMP2CONC_LUM</th>\n",
       "      <th>PARASITEDENSITY</th>\n",
       "      <th>LOG_PARASITEDENSITY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>20000.000</td>\n",
       "      <td>4.301030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>28.793</td>\n",
       "      <td>416.615</td>\n",
       "      <td>10195.616</td>\n",
       "      <td>4.008413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>18.188</td>\n",
       "      <td>797.941</td>\n",
       "      <td>6411.922</td>\n",
       "      <td>3.806988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.912</td>\n",
       "      <td>1146.250</td>\n",
       "      <td>4474.551</td>\n",
       "      <td>3.650749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.400</td>\n",
       "      <td>1463.682</td>\n",
       "      <td>3284.722</td>\n",
       "      <td>3.516499</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PID  HOUR  COMP2CONC_ART  COMP2CONC_LUM  PARASITEDENSITY  \\\n",
       "1    0   0.0          0.000          0.000        20000.000   \n",
       "2    0   1.0         28.793        416.615        10195.616   \n",
       "3    0   2.0         18.188        797.941         6411.922   \n",
       "4    0   3.0          9.912       1146.250         4474.551   \n",
       "5    0   4.0          5.400       1463.682         3284.722   \n",
       "\n",
       "   LOG_PARASITEDENSITY  \n",
       "1             4.301030  \n",
       "2             4.008413  \n",
       "3             3.806988  \n",
       "4             3.650749  \n",
       "5             3.516499  "
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Creating new column with log(parasite density), adding 0.00001 to avoid log(0) error\n",
    "df_ec50_pmax_art_adj['LOG_PARASITEDENSITY'] = np.log10(df_ec50_pmax_art_adj['PARASITEDENSITY'] + 0.00001)\n",
    "\n",
    "df_ec50_pmax_art_adj.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 13, 81, 88, 102, 144, 170, 182, 197, 203, 238, 246, 255, 270, 306, 315, 497, 533, 534, 591, 626, 634, 683, 721, 744, 761, 784, 789, 816, 819, 833, 877, 899, 902, 908, 918, 919, 924, 925, 959, 975, 980, 982]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "43"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting number of patients with treatment failure\n",
    "df_ec50_pmax_art_adj_day28_failed = df_ec50_pmax_art_adj[(df_ec50_pmax_art_adj['PARASITEDENSITY'] >= 10) & (df_ec50_pmax_art_adj['HOUR'] == 671.0)]\n",
    "df_ec50_pmax_art_adj_day28_failed_pids = df_ec50_pmax_art_adj_day28_failed['PID'].unique().tolist()\n",
    "df_ec50_pmax_art_adj_day28_failed_pids = np.array(df_ec50_pmax_art_adj_day28_failed_pids)\n",
    "print(df_ec50_pmax_art_adj_day28_failed['PID'].unique().tolist())\n",
    "len(df_ec50_pmax_art_adj_day28_failed['PID'].unique().tolist())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "95.7"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100 - ((43/1000)* 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".conda",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
